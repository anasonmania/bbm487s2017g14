package application.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.LinkedList;
import java.util.ResourceBundle;

import javax.imageio.ImageIO;

import application.Main;
import application.model.Borrow;
import javafx.animation.FadeTransition;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.Image;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class C2MyBooks implements Initializable {
	public GridPane paneHeader;
	public GridPane paneContent;
	public GridPane paneBottom;
	private LinkedList<Borrow> userBorrows;

	public TextField tfSearch;
	public Rectangle rSearch;
	public Rectangle rBookimg, rBookimg2, rBookimg3, line1, line2;
	public GridPane gpCard, gpCard2, gpCard3;
	public Label lbBookname, lbBookname2, lbBookname3, lbAuthor, lbAuthor2, lbAuthor3, lbPublisher, lbPublisher2,
			lbPublisher3, lbReturndate, lbReturndate2, lbReturndate3;
	public Button btnReturn, btnReturn2, btnReturn3;

	private FadeTransition showHeader;
	private FadeTransition hideHeader;
	private FadeTransition showContent;
	private FadeTransition hideContent;
	private FadeTransition showBottom;
	private FadeTransition hideBottom;
	private Duration opacityFactor = Duration.millis(1000.0d);
	int checkDesStart;
	int remainChar;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		setOpacityAnims();



		PreparedStatement myBooksQuery;
		ResultSet borrowResults;
		userBorrows = new LinkedList<Borrow>();
		int bookid, owner;
		String bookName, bookAuthor, bookPublisher;
		LocalDate borrowDate, returnDate;
		Image image=null;
		try {
			myBooksQuery = Main.con.prepareStatement(
					"SELECT book.id, book.name, book.author, book.publisher, book.image, borrow.returndate, borrow.borrowdate, borrow.owner "
					+ "FROM borrow INNER JOIN book "
					+ "ON borrow.idbook = book.id");
			borrowResults = myBooksQuery.executeQuery();
			while(borrowResults.next()){
				bookid = borrowResults.getInt("book.id");
				owner = borrowResults.getInt("borrow.owner");
				bookName = borrowResults.getString("book.name");
				bookAuthor = borrowResults.getString("book.author");
				bookPublisher = borrowResults.getString("book.publisher");
				borrowDate = DBFormatController.dateToJava(borrowResults.getDate("borrow.borrowdate"));
				returnDate = DBFormatController.dateToJava(borrowResults.getDate("borrow.returndate"));

				byte[] imgBuf = borrowResults.getBytes("book.image");

				if (imgBuf != null) {

					try {	ByteArrayInputStream in = new ByteArrayInputStream(imgBuf);
						BufferedImage bufferedImage;
						bufferedImage = ImageIO.read(in);
						image = SwingFXUtils.toFXImage(bufferedImage, (WritableImage) null);
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else {
					image = null;
				}

				if(Main.currentUser.getUserId() == owner){
					userBorrows.add(new Borrow(bookid, owner, bookName, bookAuthor, bookPublisher, borrowDate, returnDate, image));
				}

			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			setGUI();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		showHeader.play();
		showContent.play();
		showBottom.play();

	}

	public void toEditBook(ActionEvent event) throws SQLException, IOException {

	}

	public void setGUI() throws SQLException {
		PreparedStatement countQuery = Main.con.prepareStatement(
				"SELECT COUNT(owner) " + "AS borrowcount FROM borrow WHERE owner = " + Main.currentUser.getUserId());
		ResultSet countResult = countQuery.executeQuery();
		int borrowCount = 0;
		while (countResult.next()) {
			borrowCount = countResult.getInt("borrowcount");
		}
		if (borrowCount == 1) {
			gpCard2.setOpacity(0);
			btnReturn2.setDisable(true);
			gpCard3.setOpacity(0);
			btnReturn3.setDisable(true);
			line1.setOpacity(0);
			line2.setOpacity(0);

			if(userBorrows.get(0).getImage()!=null){
				rBookimg.setFill(new ImagePattern(userBorrows.get(0).getImage()));
			}else{
				rBookimg.setFill(new ImagePattern(Main.defaultBook));
			}
			lbBookname.setText(userBorrows.get(0).getBookName());
			lbAuthor.setText(userBorrows.get(0).getBookAuthor());
			lbPublisher.setText(userBorrows.get(0).getBookPublisher());

		} else if (borrowCount == 2) {
			gpCard3.setOpacity(0);
			btnReturn3.setDisable(true);
			line2.setOpacity(0);
		} else if (borrowCount == 3) {

		}
	}

	public void logout(ActionEvent event) throws IOException {
		Main.currentUser.logout();
		hideHeader.play();
		hideContent.play();
		hideBottom.play();
		Parent newParent = (Parent) FXMLLoader.load(getClass().getResource("../view/Login.fxml"));
		final Scene newScreen = new Scene(newParent);
		final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		Task<Void> sleeper = new Task<Void>() {
			@Override
			protected Void call() throws Exception {
				try {
					Thread.sleep((long) opacityFactor.toMillis() / 2);
				} catch (InterruptedException e) {
				}
				return null;
			}
		};
		sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
			@Override
			public void handle(WorkerStateEvent event) {
				appStage.setScene(newScreen);
				appStage.show();
			}
		});
		new Thread(sleeper).start();
	}

	public void back(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(getClass().getResource("../view/HomePageCustomer.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void setOpacityAnims() {
		showHeader = AnimationFabric.createOpacityAnim(paneHeader, 0.0d, 1.0d, opacityFactor.divide(2.0d));
		showContent = AnimationFabric.createOpacityAnim(paneContent, 0.0d, 1.0d, opacityFactor);
		showBottom = AnimationFabric.createOpacityAnim(paneBottom, 0.0d, 1.0d, opacityFactor.multiply(2.0d));
		hideHeader = AnimationFabric.createOpacityAnim(paneHeader, 1.0d, 0.0d, opacityFactor.multiply(2.0d));
		hideContent = AnimationFabric.createOpacityAnim(paneContent, 1.0d, 0.0d, opacityFactor);
		hideBottom = AnimationFabric.createOpacityAnim(paneBottom, 1.0d, 0.0d, opacityFactor.divide(2.0d));
	}

	public void lineSearch() {
		rSearch.setOpacity(1.0d);
	}
}
