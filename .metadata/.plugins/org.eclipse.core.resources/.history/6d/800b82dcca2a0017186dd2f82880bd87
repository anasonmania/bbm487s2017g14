package application.controller;

import application.Main;
import application.controller.AnimationFabric;
import application.controller.DBFormatController;
import application.model.User;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ResourceBundle;
import javafx.animation.FadeTransition;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.GridPane;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;
import javax.imageio.ImageIO;

public class L4EditBook implements Initializable {
	public GridPane paneHeader;
	public GridPane paneContent;
	public GridPane paneBottom;
	public TextField tfSearch;
	public Rectangle rSearch;
	public TableView tableBook;
	private ObservableList<User> userList;
	private FadeTransition showHeader;
	private FadeTransition hideHeader;
	private FadeTransition showContent;
	private FadeTransition hideContent;
	private FadeTransition showBottom;
	private FadeTransition hideBottom;
	private Duration opacityFactor = Duration.millis(1000.0D);
	int checkDesStart;
	int remainChar;

	@Override
	public void initialize(URL location, ResourceBundle resources) {
		this.setOpacityAnims();

		try {
			this.getUsers();
			this.createTable();
		} catch (SQLException arg3) {
			arg3.printStackTrace();
		} catch (IOException arg4) {
			arg4.printStackTrace();
		}

		this.showHeader.play();
		this.showContent.play();
		this.showBottom.play();
	}

	public void toEditBook(ActionEvent event) throws SQLException, IOException {
		Main.selectedUser = (User) this.tableBook.getSelectionModel().getSelectedItem();
		System.out.println(Main.selectedUser.getEmail());
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/L2_2EditUser.fxml"));
		final Scene newScreen = new Scene(newParent);
		final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();

		Task<Void> sleeper = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    Thread.sleep((long) opacityFactor.toMillis()/4);
                } catch (InterruptedException e) {
                }
                return null;
            }
        };
        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent event) {
            	appStage.setScene(newScreen);
        		appStage.show();
            }
        });
        new Thread(sleeper).start();
	}

	public void logout(ActionEvent event) throws IOException {
		Main.currentUser.logout();
		this.hideHeader.play();
		this.hideContent.play();
		this.hideBottom.play();
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/Login.fxml"));
		final Scene newScreen = new Scene(newParent);
		final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		Task<Void> sleeper = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    Thread.sleep((long) opacityFactor.toMillis()/2);
                } catch (InterruptedException e) {
                }
                return null;
            }
        };
        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent event) {
            	appStage.setScene(newScreen);
        		appStage.show();
            }
        });
        new Thread(sleeper).start();
	}

	public void back(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/HomePageLibrarian.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void setOpacityAnims() {
		this.showHeader = AnimationFabric.createOpacityAnim(this.paneHeader, 0.0D, 1.0D,
				this.opacityFactor.divide(2.0D));
		this.showContent = AnimationFabric.createOpacityAnim(this.paneContent, 0.0D, 1.0D, this.opacityFactor);
		this.showBottom = AnimationFabric.createOpacityAnim(this.paneBottom, 0.0D, 1.0D,
				this.opacityFactor.multiply(2.0D));
		this.hideHeader = AnimationFabric.createOpacityAnim(this.paneHeader, 1.0D, 0.0D,
				this.opacityFactor.multiply(2.0D));
		this.hideContent = AnimationFabric.createOpacityAnim(this.paneContent, 1.0D, 0.0D, this.opacityFactor);
		this.hideBottom = AnimationFabric.createOpacityAnim(this.paneBottom, 1.0D, 0.0D,
				this.opacityFactor.divide(2.0D));
	}

	public void lineSearch() {
		this.rSearch.setOpacity(1.0D);
	}

	private void getUsers() throws SQLException, IOException {
		this.userList = FXCollections.observableArrayList();
		PreparedStatement idsQuery = Main.con.prepareStatement("SELECT * FROM book ");
		ResultSet result = idsQuery.executeQuery();

		while (result.next()) {
			int iduserinfo = result.getInt("iduserinfo");
			int schoolnumber = result.getInt("schoolnumber");
			String phonenumber = result.getString("phonenumber");
			String username = result.getString("username");
			String password = result.getString("password");
			String email = result.getString("email");
			String name = result.getString("name");
			String surname = result.getString("surname");
			LocalDate birthdate;
			if (result.getDate("birthdate") != null) {
				birthdate = DBFormatController.dateToJava(result.getDate("birthdate"));
			} else {
				birthdate = null;
			}

			byte[] imgBuf = result.getBytes("profilepic");
			WritableImage profilePic;
			if (imgBuf != null) {
				ByteArrayInputStream in = new ByteArrayInputStream(imgBuf);
				BufferedImage bufferedImage = ImageIO.read(in);
				profilePic = SwingFXUtils.toFXImage(bufferedImage, (WritableImage) null);
			} else {
				profilePic = null;
			}

			int islibrarian = result.getInt("islibrarian");
			this.userList.add(new User(username, email, name, surname, phonenumber, birthdate, iduserinfo, schoolnumber,
					profilePic, islibrarian));
		}

	}

	private void createTable() {
		TableColumn usernameCol = new TableColumn("Username");
		usernameCol.setMinWidth(144.0D);
		usernameCol.setCellValueFactory(new PropertyValueFactory("username"));
		TableColumn nameCol = new TableColumn("Name");
		nameCol.setMinWidth(144.0D);
		nameCol.setCellValueFactory(new PropertyValueFactory("name"));
		this.tableBook.setItems(this.userList);
		this.tableBook.getColumns().clear();
		this.tableBook.getColumns().addAll(new Object[] { usernameCol, nameCol });
	}
}
