package application.controller;

import application.Main;
import application.model.User;
import java.io.IOException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import javafx.animation.FadeTransition;
import javafx.animation.FillTransition;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class Login {
	public Button createAccount;
	public Button login;
	public TextField tfUsername;
	public PasswordField pfPassword;
	public Rectangle rUsername;
	public Rectangle rPassword;
	public Label lbUsername;
	public Label lbPassword;
	public Label lbWelcome;
	public Label lbUserdata;
	public Boolean loginControl;
	public Boolean failControl = false;
	public Pane paneLogo;
	public GridPane paneMain;
	public HBox boxFailed;
	private Duration opacityFactor = Duration.millis(300.0D);
	private FillTransition usernameToRed;
	private FillTransition usernameToGrey;
	private FillTransition passwordToRed;
	private FillTransition passwordToGrey;
	private Timeline failExpand;
	private Timeline failCollapse;
	private FadeTransition showFail;
	private FadeTransition hideFail;
	private FadeTransition showWelcome;
	private FadeTransition hideWelcome;
	private FadeTransition showUserdata;
	private FadeTransition hideUserdata;
	private FadeTransition hideUsernametf;
	private FadeTransition showUsernamelb;
	private FadeTransition hideUsernamelb;
	private FadeTransition showUsernamer;
	private FadeTransition hideUsernamer;
	private FadeTransition hidePasswordpf;
	private FadeTransition showPasswordlb;
	private FadeTransition hidePasswordlb;
	private FadeTransition showPasswordr;
	private FadeTransition hidePasswordr;
	private FadeTransition hideLogin;
	private FadeTransition hideCreateaccount;
	private FadeTransition hideLogo;

	public void handleLogin(ActionEvent event) throws SQLException, IOException {
		this.loginControl = false;
		this.setSizeAnims();
		this.setOpacityAnims();
		this.setColorAnims();
		String inputUsername = tfUsername.getText();
		String inputUserpass = pfPassword.getText();
		PreparedStatement statement = Main.con
				.prepareStatement("SELECT password FROM user WHERE username = \'" + inputUsername + "\' ");
		ResultSet result = statement.executeQuery();

		String temp;
		for (temp = null; result.next(); temp = result.getString(1)) {
			;
		}

		if (temp != null && temp.equals(inputUserpass)) {
			this.loginControl = true;
			statement = Main.con.prepareStatement("SELECT * from user WHERE username = \'" + inputUsername + "\' ");
			result = statement.executeQuery();

			while (result.next()) {
				Main.currentUser = new User(result.getString("username"), result.getString("email"),
						result.getString("name"), result.getString("surname"), result.getString("phonenumber"),
						(LocalDate) null, result.getInt("iduserinfo"), result.getInt("schoolnumber"), (Image) null,
						result.getInt("islibrarian"));
				System.out.println(result.getString("username"));
				System.out.println(Main.currentUser.getSurname());
			}

			int islabrarian = Main.currentUser.getIslibrarian();
			this.lbUserdata.setText(Main.currentUser.getName() + " " + Main.currentUser.getSurname());
			Parent newParent;
			final Scene newScreen;
			final Stage appStage;
			Task sleeper;
			if (islabrarian > 0) {
				this.hideUsernametf.play();
				this.hideUsernamelb.play();
				this.hideUsernamer.play();
				this.hidePasswordpf.play();
				this.hidePasswordlb.play();
				this.hidePasswordr.play();
				this.hideLogin.play();
				this.hideCreateaccount.play();
				this.hideLogo.play();
				this.showWelcome.play();
				this.showUserdata.play();
				newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/HomePageLibrarian.fxml"));
				newScreen = new Scene(newParent);
				appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
				sleeper = new Task() {
					protected Void call() throws Exception {
						try {
							Thread.sleep((long) Login.this.opacityFactor.toMillis() * 3L);
						} catch (InterruptedException arg1) {
							;
						}

						return null;
					}
				};
				sleeper.setOnSucceeded(new EventHandler() {

					@Override
					public void handle(Event event) {
						appStage.setScene(newScreen);
						appStage.show();
					}
				});
				(new Thread(sleeper)).start();
			} else {
				this.hideUsernametf.play();
				this.hideUsernamelb.play();
				this.hideUsernamer.play();
				this.hidePasswordpf.play();
				this.hidePasswordlb.play();
				this.hidePasswordr.play();
				this.hideLogin.play();
				this.hideCreateaccount.play();
				this.hideLogo.play();
				this.showWelcome.play();
				this.showUserdata.play();
				newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/HomePageCustomer.fxml"));
				newScreen = new Scene(newParent);
				appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
				sleeper = new Task() {
					protected Void call() throws Exception {
						try {
							Thread.sleep((long) Login.this.opacityFactor.toMillis() * 3L);
						} catch (InterruptedException arg1) {
							;
						}

						return null;
					}
				};
				sleeper.setOnSucceeded(new EventHandler() {
					@Override
					public void handle(Event event) {
						appStage.setScene(newScreen);
						appStage.show();
					}

				});
				(new Thread(sleeper)).start();
			}

			System.out.println(Main.currentUser.getBirthDate());
			System.out.println(Main.currentUser.getIslibrarian());
		}

		if (!this.loginControl.booleanValue()) {
			this.failExpand.play();
			this.showFail.play();
			this.usernameToRed.play();
			this.passwordToRed.play();
			this.failControl = true;
		}

	}

	public void handleCreateAccount(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/CreateAccount.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void lineUsername() {
		this.rUsername.setOpacity(1.0D);
		if (this.failControl.booleanValue()) {
			this.rollbackAnims();
		}

	}

	public void linePassword() {
		this.rPassword.setOpacity(1.0D);
		if (this.failControl.booleanValue()) {
			this.rollbackAnims();
		}

	}

	public void setColorAnims() {
		this.usernameToRed = new FillTransition(Duration.millis(300.0D), this.rUsername, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		this.usernameToGrey = new FillTransition(Duration.millis(300.0D), this.rUsername, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
		this.passwordToRed = new FillTransition(Duration.millis(300.0D), this.rPassword, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		this.passwordToGrey = new FillTransition(Duration.millis(300.0D), this.rPassword, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
	}

	public void setSizeAnims() {
		this.failExpand = new Timeline();
		this.failExpand
				.getKeyFrames().addAll(
						new KeyFrame[] {
								new KeyFrame(Duration.ZERO,
										new KeyValue[] { new KeyValue(this.boxFailed.prefHeightProperty(),
												Integer.valueOf(0)) }),
								new KeyFrame(Duration.millis(200.0D), new KeyValue[] {
										new KeyValue(this.boxFailed.prefHeightProperty(), Integer.valueOf(36)) }) });
		this.failCollapse = new Timeline();
		this.failCollapse
				.getKeyFrames().addAll(
						new KeyFrame[] {
								new KeyFrame(Duration.ZERO,
										new KeyValue[] { new KeyValue(this.boxFailed.prefHeightProperty(),
												Integer.valueOf(36)) }),
								new KeyFrame(Duration.millis(200.0D), new KeyValue[] {
										new KeyValue(this.boxFailed.prefHeightProperty(), Integer.valueOf(0)) }) });
	}

	public void setOpacityAnims() {
		showFail = new FadeTransition(opacityFactor, boxFailed);
		showFail.setFromValue(0.0D);
		showFail.setToValue(1.0D);
		hideFail = new FadeTransition(opacityFactor, boxFailed);
		hideFail.setFromValue(1.0D);
		hideFail.setToValue(0.0D);
		hideUsernametf = new FadeTransition(opacityFactor, tfUsername);
		hideUsernametf.setFromValue(1.0D);
		hideUsernametf.setToValue(0.0D);
		showUsernamelb = new FadeTransition(opacityFactor, lbUsername);
		showUsernamelb.setFromValue(0.0D);
		showUsernamelb.setToValue(1.0D);
		hideUsernamelb = new FadeTransition(opacityFactor, lbUsername);
		hideUsernamelb.setFromValue(1.0D);
		hideUsernamelb.setToValue(0.0D);
		showUsernamer = new FadeTransition(opacityFactor, rUsername);
		showUsernamer.setFromValue(0.0D);
		showUsernamer.setToValue(1.0D);
		hideUsernamer = new FadeTransition(opacityFactor, rUsername);
		hideUsernamer.setFromValue(1.0D);
		hideUsernamer.setToValue(0.0D);
		hidePasswordpf = new FadeTransition(opacityFactor, pfPassword);
		hidePasswordpf.setFromValue(1.0D);
		hidePasswordpf.setToValue(0.0D);
		showPasswordlb = new FadeTransition(opacityFactor, lbPassword);
		showPasswordlb.setFromValue(0.0D);
		showPasswordlb.setToValue(1.0D);
		hidePasswordlb = new FadeTransition(opacityFactor, lbPassword);
		hidePasswordlb.setFromValue(1.0D);
		hidePasswordlb.setToValue(0.0D);
		showPasswordr = new FadeTransition(opacityFactor, rPassword);
		showPasswordr.setFromValue(0.0D);
		showPasswordr.setToValue(1.0D);
		hidePasswordr = new FadeTransition(opacityFactor, rPassword);
		hidePasswordr.setFromValue(1.0D);
		hidePasswordr.setToValue(0.0D);
		showWelcome = new FadeTransition(opacityFactor, lbWelcome);
		showWelcome.setFromValue(0.0D);
		showWelcome.setToValue(1.0D);
		showUserdata = new FadeTransition(opacityFactor, lbUserdata);
		showUserdata.setFromValue(0.0D);
		showUserdata.setToValue(1.0D);
		hideLogin = new FadeTransition(opacityFactor, login);
		hideLogin.setFromValue(1.0D);
		hideLogin.setToValue(0.0D);
		hideCreateaccount = new FadeTransition(opacityFactor, createAccount);
		hideCreateaccount.setFromValue(1.0D);
		hideCreateaccount.setToValue(0.0D);
		hideLogo = new FadeTransition(opacityFactor, paneLogo);
		hideLogo.setFromValue(1.0D);
		hideLogo.setToValue(0.0D);
	}

	public void rollbackAnims() {
		failCollapse.play();
		hideFail.play();
		usernameToGrey.play();
		passwordToGrey.play();
		failControl = false;
	}
}

