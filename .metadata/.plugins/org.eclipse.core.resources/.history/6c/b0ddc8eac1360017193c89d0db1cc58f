package application.controller;

import application.Main;
import application.controller.AnimationFabric;
import application.controller.DBFormatController;
import java.io.IOException;
import java.net.URL;
import java.security.NoSuchAlgorithmException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.animation.FadeTransition;
import javafx.animation.FillTransition;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class CreateAccount implements Initializable {
	public TextField tfUsername;
	public TextField tfSchoolNumber;
	public TextField tfEmail;
	public TextField tfName;
	public TextField tfSurname;
	public TextField tfPhoneNumber;
	public PasswordField pfPassword;
	public DatePicker dpBirthday;
	public GridPane paneHeader;
	public GridPane paneForm;
	public VBox paneBottom;
	public Pane iconTick;
	public Label lbCreated;
	public Button btnClicktologin;
	public Label warnUsername;
	public Label warnPassword;
	public Label warnSchoolnumber;
	public Label warnEmail;
	public Rectangle rUsername;
	public Rectangle rPassword;
	public Rectangle rSchoolnumber;
	public Rectangle rEmail;
	public Rectangle rName;
	public Rectangle rSurname;
	public Rectangle rBirthdate;
	public Rectangle rPhonenumber;
	private boolean failControl;
	private boolean failUsername;
	private boolean failPassword;
	private boolean failSchoolnumber;
	private boolean failEmail;
	private Timeline tmDown;
	private Timeline tmUp;
	private FillTransition usernameToRed;
	private FillTransition usernameToGrey;
	private FillTransition passwordToRed;
	private FillTransition passwordToGrey;
	private FillTransition schoolnumberToRed;
	private FillTransition schoolnumberToGrey;
	private FillTransition emailToRed;
	private FillTransition emailToGrey;
	private FadeTransition showUsernameWarning;
	private FadeTransition hideUsernameWarning;
	private FadeTransition showPasswordWarning;
	private FadeTransition hidePasswordWarning;
	private FadeTransition showSchoolnumberWarning;
	private FadeTransition hideSchoolnumberWarning;
	private FadeTransition showEmailWarning;
	private FadeTransition hideEmailWarning;
	private FadeTransition showForm;
	private FadeTransition hideForm;
	private FadeTransition showHeader;
	private FadeTransition hideHeader;
	private FadeTransition showBottom;
	private FadeTransition hideBottom;
	private FadeTransition showSuccessMsg;
	private FadeTransition showSuccessImg;
	private FadeTransition showSuccessBtn;
	private Duration opacityFactor = Duration.millis(300.0D);
	private Pattern pattern;
	private Matcher matcher;
	public static final String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";

	public void initialize(URL location, ResourceBundle resources) {
		tfUsername.setPromptText("Username");
		tfSchoolNumber.setPromptText("School Number");
		tfEmail.setPromptText("E-mail");
		tfName.setPromptText("Name");
		tfSurname.setPromptText("Surname");
		tfPhoneNumber.setPromptText("Phone Number");
		pfPassword.setPromptText("Password");
		dpBirthday.setPromptText("Date of birth");
		failControl = false;
		failUsername = false;
		failPassword = false;
		failSchoolnumber = false;
		failEmail = false;
		setPositionAnims();
		setColorAnims();
		setOpacityAnims();
		showHeader.play();
		showForm.play();
		showBottom.play();
		pattern = Pattern
				.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
	}

	public void createAccount(ActionEvent event) throws SQLException, NoSuchAlgorithmException {
		HashSet<Integer> ids = new HashSet<Integer>();
		PreparedStatement idsQuery = Main.con.prepareStatement("SELECT iduserinfo FROM user ");
		ResultSet result = idsQuery.executeQuery();

		while (result.next()) {
			ids.add(Integer.valueOf(Integer.parseInt(result.getString(1))));
		}

		if (!checkInputs()) {
			PreparedStatement statement = Main.con.prepareStatement(
					"INSERT INTO user (`iduserinfo`, `username`, `password`, `schoolnumber`, `email`, `name`, `surname`, `birthdate`, `phonenumber`, `islibrarian`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ? )");
			Random generator = new Random();

			int iduserinfo;
			for (iduserinfo = generator.nextInt(99999999) + 1; ids
					.contains(Integer.valueOf(iduserinfo)); iduserinfo = generator.nextInt(99999999) + 1) {
				;
			}

			String username = tfUsername.getText();
			String password = DBFormatController.passToDatabase(pfPassword.getText());
			if (!tfSchoolNumber.getText().equals("")) {
				int schoolnumber = Integer.parseInt(tfSchoolNumber.getText());
				statement.setInt(4, schoolnumber);
			}

			String email = tfEmail.getText();
			String name = tfName.getText();
			String surname = tfSurname.getText();
			String phonenumber = tfPhoneNumber.getText();
			LocalDate birthdate = (LocalDate) dpBirthday.getValue();
			System.out.println(birthdate);
			statement.setInt(1, iduserinfo);
			statement.setString(2, username);
			statement.setString(3, password);
			statement.setString(5, email);
			statement.setString(6, name);
			statement.setString(7, surname);
			if(birthdate==null)
				statement.setDate(8, null);
			else
				statement.setDate(8, DBFormatController.dateToDatabase(birthdate));
			statement.setString(9, phonenumber);
			statement.setInt(10, 0);
			statement.execute();
			hideBottom.play();
			hideForm.play();
			hideHeader.play();
			showSuccessMsg.play();
			showSuccessImg.play();
			showSuccessBtn.play();
		}

	}

	private boolean checkInputs() throws SQLException {
		HashSet<String> users = new HashSet<String>();
		PreparedStatement usersQuery = Main.con.prepareStatement("SELECT username FROM user ");
		ResultSet result = usersQuery.executeQuery();

		while (result.next()) {
			users.add(result.getString(1));
		}

		if (tfUsername.getText().equals("")) {
			warnUsername.setText("Please enter a username");
			usernameToRed.play();
			showUsernameWarning.play();
			failUsername = true;
			failControl = true;
		} else if (users.contains(tfUsername.getText())) {
			warnUsername.setText("This username is already taken");
			usernameToRed.play();
			showUsernameWarning.play();
			failUsername = true;
			failControl = true;
		}

		if (pfPassword.getText().equals("")) {
			warnPassword.setText("Please enter a password");
			passwordToRed.play();
			showPasswordWarning.play();
			failPassword = true;
			failControl = true;
		}

		HashSet<Integer> schoolNums = new HashSet<Integer>();
		PreparedStatement schoolNumsQuery = Main.con.prepareStatement("SELECT schoolnumber FROM user ");
		result = schoolNumsQuery.executeQuery();

		while (result.next()) {
			schoolNums.add(Integer.valueOf(Integer.parseInt(result.getString(1))));
		}

		if (tfSchoolNumber.getText().equals("")) {
			warnSchoolnumber.setText("Please enter a schoolnumber");
			schoolnumberToRed.play();
			showSchoolnumberWarning.play();
			failSchoolnumber = true;
			failControl = true;
		} else if (schoolNums.contains(Integer.valueOf(Integer.parseInt(tfSchoolNumber.getText())))) {
			warnSchoolnumber.setText("This schoolnumber is already defined for an account");
			schoolnumberToRed.play();
			showSchoolnumberWarning.play();
			failSchoolnumber = true;
			failControl = true;
		}

		HashSet<String> emails = new HashSet<String>();
		PreparedStatement emailsQuery = Main.con.prepareStatement("SELECT email FROM user ");
		result = emailsQuery.executeQuery();

		while (result.next()) {
			emails.add(result.getString(1));
		}

		if (tfEmail.getText().equals("")) {
			warnEmail.setText("Please enter an e-mail adress");
			emailToRed.play();
			showEmailWarning.play();
			failEmail = true;
			failControl = true;
		} else {
			matcher = pattern.matcher(tfEmail.getText());
			if (!matcher.matches()) {
				warnEmail.setText("E-mail is not valid formatted");
				emailToRed.play();
				showEmailWarning.play();
				failEmail = true;
				failControl = true;
			} else if (emails.contains(tfEmail.getText())) {
				warnEmail.setText("This e-mail is already defined for an account");
				emailToRed.play();
				showEmailWarning.play();
				failEmail = true;
				failControl = true;
			}
		}

		Iterator<Integer> arg8 = schoolNums.iterator();

		while (arg8.hasNext()) {
			Integer x = (Integer) arg8.next();
			System.out.println(x);
		}

		if (failControl) {
			tmDown.play();
		}

		return failControl;
	}

	public void back(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(getClass().getResource("../view/Login.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void lineUsername() {
		rUsername.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void linePassword() {
		rPassword.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void lineSchoolNumber() {
		rSchoolnumber.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void lineEmail() {
		rEmail.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void lineName() {
		rName.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void lineSurname() {
		rSurname.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void lineBirthday() {
		rBirthdate.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void linePhoneNumber() {
		rPhonenumber.setOpacity(1.0D);
		if (failControl) {
			rollbackAnims();
		}

	}

	public void setPositionAnims() {
		tmDown = new Timeline();
		tmUp = new Timeline();
		LinkedList<Node> formElements = new LinkedList<Node>();
		formElements.add(rUsername);
		formElements.add(tfUsername);
		formElements.add(rPassword);
		formElements.add(pfPassword);
		formElements.add(rSchoolnumber);
		formElements.add(tfSchoolNumber);
		formElements.add(rEmail);
		formElements.add(tfEmail);
		formElements.add(rName);
		formElements.add(tfName);
		formElements.add(rSurname);
		formElements.add(tfSurname);
		formElements.add(rBirthdate);
		formElements.add(dpBirthday);
		formElements.add(rPhonenumber);
		formElements.add(tfPhoneNumber);
		tmDown = AnimationFabric.createPositionAnim(formElements, -10, 0);
		tmUp = AnimationFabric.createPositionAnim(formElements, 0, -10);
	}

	public void setColorAnims() {
		usernameToRed = new FillTransition(Duration.millis(300.0D), rUsername, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		usernameToGrey = new FillTransition(Duration.millis(300.0D), rUsername, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
		passwordToRed = new FillTransition(Duration.millis(300.0D), rPassword, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		passwordToGrey = new FillTransition(Duration.millis(300.0D), rPassword, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
		schoolnumberToRed = new FillTransition(Duration.millis(300.0D), rSchoolnumber,
				Color.valueOf("#727986"), Color.valueOf("#d41923"));
		schoolnumberToGrey = new FillTransition(Duration.millis(300.0D), rSchoolnumber,
				Color.valueOf("#d41923"), Color.valueOf("#727986"));
		emailToRed = new FillTransition(Duration.millis(300.0D), rEmail, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		emailToGrey = new FillTransition(Duration.millis(300.0D), rEmail, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
	}

	public void setOpacityAnims() {
		showUsernameWarning = AnimationFabric.createOpacityAnim(warnUsername, 0.0D, 1.0D, opacityFactor);
		hideUsernameWarning = AnimationFabric.createOpacityAnim(warnUsername, 1.0D, 0.0D, opacityFactor);
		showPasswordWarning = AnimationFabric.createOpacityAnim(warnPassword, 0.0D, 1.0D, opacityFactor);
		hidePasswordWarning = AnimationFabric.createOpacityAnim(warnPassword, 1.0D, 0.0D, opacityFactor);
		showSchoolnumberWarning = AnimationFabric.createOpacityAnim(warnSchoolnumber, 0.0D, 1.0D,
				opacityFactor);
		hideSchoolnumberWarning = AnimationFabric.createOpacityAnim(warnSchoolnumber, 1.0D, 0.0D,
				opacityFactor);
		showEmailWarning = AnimationFabric.createOpacityAnim(warnEmail, 0.0D, 1.0D, opacityFactor);
		hideEmailWarning = AnimationFabric.createOpacityAnim(warnEmail, 1.0D, 0.0D, opacityFactor);
		showHeader = AnimationFabric.createOpacityAnim(paneHeader, 0.0D, 1.0D, opacityFactor);
		hideHeader = AnimationFabric.createOpacityAnim(paneHeader, 1.0D, 0.0D,
				opacityFactor.multiply(3.0D));
		showForm = AnimationFabric.createOpacityAnim(paneForm, 0.0D, 1.0D, opacityFactor.multiply(2.0D));
		hideForm = AnimationFabric.createOpacityAnim(paneForm, 1.0D, 0.0D, opacityFactor.multiply(2.0D));
		showBottom = AnimationFabric.createOpacityAnim(paneBottom, 0.0D, 1.0D,
				opacityFactor.multiply(3.0D));
		hideBottom = AnimationFabric.createOpacityAnim(paneBottom, 1.0D, 0.0D, opacityFactor);
		showSuccessMsg = AnimationFabric.createOpacityAnim(lbCreated, 0.0D, 1.0D,
				opacityFactor.multiply(2.0D));
		hideSuccessMsg = AnimationFabric.createOpacityAnim(lbCreated, 1.0D, 0.0D, opacityFactor);
		showSuccessImg = AnimationFabric.createOpacityAnim(iconTick, 0.0D, 1.0D, opacityFactor);
		hideSuccessImg = AnimationFabric.createOpacityAnim(iconTick, 1.0D, 0.0D, opacityFactor);
		showSuccessBtn = AnimationFabric.createOpacityAnim(btnClicktologin, 0.0D, 1.0D,
				opacityFactor.multiply(3.0D));
		hideSuccessBtn = AnimationFabric.createOpacityAnim(btnClicktologin, 1.0D, 0.0D, opacityFactor);
	}

	public void rollbackAnims() {
		tmUp.play();
		if (failUsername) {
			usernameToGrey.play();
			hideUsernameWarning.play();
			failUsername = false;
		}

		if (failPassword) {
			passwordToGrey.play();
			hidePasswordWarning.play();
			failPassword = false;
		}

		if (failSchoolnumber) {
			schoolnumberToGrey.play();
			hideSchoolnumberWarning.play();
			failSchoolnumber = false;
		}

		if (failEmail) {
			emailToGrey.play();
			hideEmailWarning.play();
			failEmail = false;
		}

		failControl = false;
	}
}