package application.controller;

import application.Main;
import application.controller.AnimationFabric;
import application.controller.DBFormatController;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javafx.animation.FadeTransition;
import javafx.animation.FillTransition;
import javafx.animation.Timeline;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.PasswordField;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.util.Duration;
import javax.imageio.ImageIO;

public class L1AddUser implements Initializable {
	public GridPane paneHeader;
	public GridPane paneContent;
	public GridPane paneBottom;
	public TextField tfUsername;
	public TextField tfSchoolNumber;
	public TextField tfEmail;
	public TextField tfName;
	public TextField tfSurname;
	public TextField tfPhoneNumber;
	public Label warnUsername;
	public Label warnPassword;
	public Label warnSchoolnumber;
	public Label warnEmail;
	public PasswordField pfPassword;
	public DatePicker dpBirthday;
	public Label lbDeslength;
	public Pane imageUser;
	private boolean imageLoaded;
	private Image image;
	private File imageFile;
	public Rectangle rUsername;
	public Rectangle rPassword;
	public Rectangle rSchoolnumber;
	public Rectangle rEmail;
	public Rectangle rName;
	public Rectangle rSurname;
	public Rectangle rBirthdate;
	public Rectangle rPhonenumber;
	private boolean failControl;
	private boolean failUsername;
	private boolean failPassword;
	private boolean failSchoolnumber;
	private boolean failEmail;
	private Timeline tmDown;
	private Timeline tmUp;
	private FadeTransition showUsernameWarning;
	private FadeTransition hideUsernameWarning;
	private FadeTransition showPasswordWarning;
	private FadeTransition hidePasswordWarning;
	private FadeTransition showSchoolnumberWarning;
	private FadeTransition hideSchoolnumberWarning;
	private FadeTransition showEmailWarning;
	private FadeTransition hideEmailWarning;
	private FadeTransition showContent;
	private FadeTransition hideContent;
	private FadeTransition showHeader;
	private FadeTransition hideHeader;
	private FadeTransition showBottom;
	private FadeTransition hideBottom;
	private FadeTransition showSuccessMsg;
	private FadeTransition hideSuccessMsg;
	private FadeTransition showSuccessImg;
	private FadeTransition hideSuccessImg;
	private FadeTransition showSuccessBtn;
	private FadeTransition hideSuccessBtn;
	private FillTransition usernameToRed;
	private FillTransition usernameToGrey;
	private FillTransition passwordToRed;
	private FillTransition passwordToGrey;
	private FillTransition schoolnumberToRed;
	private FillTransition schoolnumberToGrey;
	private FillTransition emailToRed;
	private FillTransition emailToGrey;
	private Duration opacityFactor = Duration.millis(1000.0D);
	private Pattern pattern;
	private Matcher matcher;
	private static final String EMAIL_PATTERN = "^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
	int checkDesStart;
	int remainChar;

	public void initialize(URL location, ResourceBundle resources) {
		this.tfUsername.setPromptText("Username");
		this.tfSchoolNumber.setPromptText("School Number");
		this.tfEmail.setPromptText("E-mail");
		this.tfName.setPromptText("Name");
		this.tfSurname.setPromptText("Surname");
		this.tfPhoneNumber.setPromptText("Phone Number");
		this.pfPassword.setPromptText("Password");
		this.dpBirthday.setPromptText("Date of birth");
		this.failControl = false;
		this.failUsername = false;
		this.failPassword = false;
		this.failSchoolnumber = false;
		this.failEmail = false;
		this.imageLoaded = false;
		this.pattern = Pattern
				.compile("^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$");
		this.setPositionAnims();
		this.setColorAnims();
		this.setOpacityAnims();
		this.showHeader.play();
		this.showContent.play();
		this.showBottom.play();
	}

	public void addNewUser(ActionEvent event) throws FileNotFoundException, SQLException {
		if (!this.checkInputs()) {
			HashSet ids = new HashSet();
			PreparedStatement idsQuery = Main.con.prepareStatement("SELECT iduserinfo FROM user ");
			ResultSet result = idsQuery.executeQuery();

			while (result.next()) {
				ids.add(Integer.valueOf(Integer.parseInt(result.getString(1))));
			}

			int iduserinfo;
			int schoolnumber;
			String username;
			String password;
			String email;
			String name;
			String surname;
			String phonenumber;
			LocalDate birthdate;
			PreparedStatement statement;
			Random generator;
			if (this.imageLoaded) {
				FileInputStream insUser = new FileInputStream(this.imageFile.getPath());
				statement = Main.con.prepareStatement(
						"INSERT INTO user (`iduserinfo`, `username`, `password`, `schoolnumber`, `email`, `name`, `surname`, `birthdate`, `phonenumber`, `profilepic`, `islibrarian`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )");
				generator = new Random();

				for (iduserinfo = generator.nextInt(99999999) + 1; ids
						.contains(Integer.valueOf(iduserinfo)); iduserinfo = generator.nextInt(99999999) + 1) {
					;
				}

				username = this.tfUsername.getText();
				password = this.pfPassword.getText();
				if (!this.tfSchoolNumber.getText().equals("")) {
					schoolnumber = Integer.parseInt(this.tfSchoolNumber.getText());
					statement.setInt(4, schoolnumber);
				}

				email = this.tfEmail.getText();
				name = this.tfName.getText();
				surname = this.tfSurname.getText();
				phonenumber = this.tfPhoneNumber.getText();
				birthdate = (LocalDate) this.dpBirthday.getValue();
				System.out.println(birthdate);
				statement.setInt(1, iduserinfo);
				statement.setString(2, username);
				statement.setString(3, password);
				statement.setString(5, email);
				statement.setString(6, name);
				statement.setString(7, surname);
				statement.setDate(8, DBFormatController.dateToDatabase(birthdate));
				statement.setString(9, phonenumber);
				statement.setBlob(10, insUser);
				statement.setInt(11, 0);
				statement.execute();
				this.hideBottom.play();
				this.hideContent.play();
				this.hideHeader.play();
				this.showSuccessMsg.play();
				this.showSuccessImg.play();
			} else {
				statement = Main.con.prepareStatement(
						"INSERT INTO user (`iduserinfo`, `username`, `password`, `schoolnumber`, `email`, `name`, `surname`, `birthdate`, `phonenumber`, `islibrarian`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ? )");
				generator = new Random();

				for (iduserinfo = generator.nextInt(99999999) + 1; ids
						.contains(Integer.valueOf(iduserinfo)); iduserinfo = generator.nextInt(99999999) + 1) {
					;
				}

				username = this.tfUsername.getText();
				password = this.pfPassword.getText();
				if (!this.tfSchoolNumber.getText().equals("")) {
					schoolnumber = Integer.parseInt(this.tfSchoolNumber.getText());
					statement.setInt(4, schoolnumber);
				}

				email = this.tfEmail.getText();
				name = this.tfName.getText();
				surname = this.tfSurname.getText();
				phonenumber = this.tfPhoneNumber.getText();
				birthdate = (LocalDate) this.dpBirthday.getValue();
				statement.setInt(1, iduserinfo);
				statement.setString(2, username);
				statement.setString(3, password);
				statement.setString(5, email);
				statement.setString(6, name);
				statement.setString(7, surname);
				statement.setDate(8, DBFormatController.dateToDatabase(birthdate));
				statement.setString(9, phonenumber);
				statement.setInt(10, 0);
				statement.execute();
				this.hideBottom.play();
				this.hideContent.play();
				this.hideHeader.play();
				this.showSuccessMsg.play();
				this.showSuccessImg.play();
			}
		}

	}

	public void setOpacityAnims() {
		this.showHeader = AnimationFabric.createOpacityAnim(this.paneHeader, 0.0D, 1.0D,
				this.opacityFactor.divide(2.0D));
		this.showContent = AnimationFabric.createOpacityAnim(this.paneContent, 0.0D, 1.0D, this.opacityFactor);
		this.showBottom = AnimationFabric.createOpacityAnim(this.paneBottom, 0.0D, 1.0D,
				this.opacityFactor.multiply(2.0D));
		this.hideHeader = AnimationFabric.createOpacityAnim(this.paneHeader, 1.0D, 0.0D,
				this.opacityFactor.multiply(2.0D));
		this.hideContent = AnimationFabric.createOpacityAnim(this.paneContent, 1.0D, 0.0D, this.opacityFactor);
		this.hideBottom = AnimationFabric.createOpacityAnim(this.paneBottom, 1.0D, 0.0D,
				this.opacityFactor.divide(2.0D));
		this.showUsernameWarning = AnimationFabric.createOpacityAnim(this.warnUsername, 0.0D, 1.0D, this.opacityFactor);
		this.hideUsernameWarning = AnimationFabric.createOpacityAnim(this.warnUsername, 1.0D, 0.0D, this.opacityFactor);
		this.showPasswordWarning = AnimationFabric.createOpacityAnim(this.warnPassword, 0.0D, 1.0D, this.opacityFactor);
		this.hidePasswordWarning = AnimationFabric.createOpacityAnim(this.warnPassword, 1.0D, 0.0D, this.opacityFactor);
		this.showSchoolnumberWarning = AnimationFabric.createOpacityAnim(this.warnSchoolnumber, 0.0D, 1.0D,
				this.opacityFactor);
		this.hideSchoolnumberWarning = AnimationFabric.createOpacityAnim(this.warnSchoolnumber, 1.0D, 0.0D,
				this.opacityFactor);
		this.showEmailWarning = AnimationFabric.createOpacityAnim(this.warnEmail, 0.0D, 1.0D, this.opacityFactor);
		this.hideEmailWarning = AnimationFabric.createOpacityAnim(this.warnEmail, 1.0D, 0.0D, this.opacityFactor);
	}

	public void selectImage() {
		LinkedList extensions = new LinkedList();
		extensions.add("*.jpg");
		extensions.add("*.png");
		extensions.add("*.jpeg");
		extensions.add("*.gif");
		System.out.println("imagefield clicked");
		FileChooser fileChooser = new FileChooser();
		fileChooser.getExtensionFilters().add(new ExtensionFilter("Image Files", extensions));
		this.imageFile = fileChooser.showOpenDialog((Window) null);
		if (this.imageFile != null) {
			System.out.println(this.imageFile.getName());
		}

		try {
			BufferedImage ex = ImageIO.read(this.imageFile);
			System.out.println(ex.getWidth() + " " + ex.getHeight());
			this.image = SwingFXUtils.toFXImage(ex, (WritableImage) null);
			BackgroundImage bgImgBook = new BackgroundImage(this.image, BackgroundRepeat.NO_REPEAT,
					BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, BackgroundSize.DEFAULT);
			Background bgBook = new Background(new BackgroundImage[] { bgImgBook });
			this.imageUser.setBackground(bgBook);
			this.imageLoaded = true;
			this.imageUser.setOpacity(1.0D);
		} catch (IOException arg5) {
			System.out.println("There is a problem with file");
		}

	}

	private boolean checkInputs() throws SQLException {
		HashSet users = new HashSet();
		PreparedStatement usersQuery = Main.con.prepareStatement("SELECT username FROM user ");
		ResultSet result = usersQuery.executeQuery();

		while (result.next()) {
			users.add(result.getString(1));
		}

		if (this.tfUsername.getText().equals("")) {
			this.warnUsername.setText("Please enter a username");
			this.usernameToRed.play();
			this.showUsernameWarning.play();
			this.failUsername = true;
			this.failControl = true;
		} else if (users.contains(this.tfUsername.getText())) {
			this.warnUsername.setText("This username is already taken");
			this.usernameToRed.play();
			this.showUsernameWarning.play();
			this.failUsername = true;
			this.failControl = true;
		}

		if (this.pfPassword.getText().equals("")) {
			this.warnPassword.setText("Please enter a password");
			this.passwordToRed.play();
			this.showPasswordWarning.play();
			this.failPassword = true;
			this.failControl = true;
		}

		HashSet schoolNums = new HashSet();
		PreparedStatement schoolNumsQuery = Main.con.prepareStatement("SELECT schoolnumber FROM user ");
		result = schoolNumsQuery.executeQuery();

		while (result.next()) {
			schoolNums.add(Integer.valueOf(Integer.parseInt(result.getString(1))));
		}

		if (this.tfSchoolNumber.getText().equals("")) {
			this.warnSchoolnumber.setText("Please enter a schoolnumber");
			this.schoolnumberToRed.play();
			this.showSchoolnumberWarning.play();
			this.failSchoolnumber = true;
			this.failControl = true;
		} else if (schoolNums.contains(Integer.valueOf(Integer.parseInt(this.tfSchoolNumber.getText())))) {
			this.warnSchoolnumber.setText("This schoolnumber is already defined for an account");
			this.schoolnumberToRed.play();
			this.showSchoolnumberWarning.play();
			this.failSchoolnumber = true;
			this.failControl = true;
		}

		HashSet emails = new HashSet();
		PreparedStatement emailsQuery = Main.con.prepareStatement("SELECT email FROM user ");
		result = emailsQuery.executeQuery();

		while (result.next()) {
			emails.add(result.getString(1));
		}

		if (this.tfEmail.getText().equals("")) {
			this.warnEmail.setText("Please enter an e-mail adress");
			this.emailToRed.play();
			this.showEmailWarning.play();
			this.failEmail = true;
			this.failControl = true;
		} else {
			this.matcher = this.pattern.matcher(this.tfEmail.getText());
			if (!this.matcher.matches()) {
				this.warnEmail.setText("E-mail is not valid formatted");
				this.emailToRed.play();
				this.showEmailWarning.play();
				this.failEmail = true;
				this.failControl = true;
			} else if (emails.contains(this.tfEmail.getText())) {
				this.warnEmail.setText("This e-mail is already defined for an account");
				this.emailToRed.play();
				this.showEmailWarning.play();
				this.failEmail = true;
				this.failControl = true;
			}
		}

		Iterator arg8 = schoolNums.iterator();

		while (arg8.hasNext()) {
			Integer x = (Integer) arg8.next();
			System.out.println(x);
		}

		if (this.failControl) {
			this.tmDown.play();
		}

		return this.failControl;
	}

	public void incImagefield() {
		this.imageUser.setOpacity(1.0D);
	}

	public void decImagefield() {
		if (!this.imageLoaded) {
			this.imageUser.setOpacity(0.4D);
		}

	}

	public void logout(ActionEvent event) throws IOException {
		Main.currentUser.logout();
		this.hideHeader.play();
		this.hideContent.play();
		this.hideBottom.play();
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/Login.fxml"));
		final Scene newScreen = new Scene(newParent);
		final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();

		Task<Void> sleeper = new Task<Void>() {
            @Override
            protected Void call() throws Exception {
                try {
                    Thread.sleep((long) opacityFactor.toMillis()/2);
                } catch (InterruptedException e) {
                }
                return null;
            }
        };
        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
            @Override
            public void handle(WorkerStateEvent event) {
            	appStage.setScene(newScreen);
        		appStage.show();
            }
        });
        new Thread(sleeper).start();
	}

	public void back(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/HomePageLibrarian.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void setPositionAnims() {
		this.tmDown = new Timeline();
		this.tmUp = new Timeline();
		LinkedList formElements = new LinkedList();
		formElements.add(this.rUsername);
		formElements.add(this.tfUsername);
		formElements.add(this.rPassword);
		formElements.add(this.pfPassword);
		formElements.add(this.rSchoolnumber);
		formElements.add(this.tfSchoolNumber);
		formElements.add(this.rEmail);
		formElements.add(this.tfEmail);
		formElements.add(this.rName);
		formElements.add(this.tfName);
		formElements.add(this.rSurname);
		formElements.add(this.tfSurname);
		formElements.add(this.rBirthdate);
		formElements.add(this.dpBirthday);
		formElements.add(this.rPhonenumber);
		formElements.add(this.tfPhoneNumber);
		this.tmDown = AnimationFabric.createPositionAnim(formElements, -10, 0);
		this.tmUp = AnimationFabric.createPositionAnim(formElements, 0, -10);
	}

	public void setColorAnims() {
		this.usernameToRed = new FillTransition(Duration.millis(300.0D), this.rUsername, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		this.usernameToGrey = new FillTransition(Duration.millis(300.0D), this.rUsername, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
		this.passwordToRed = new FillTransition(Duration.millis(300.0D), this.rPassword, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		this.passwordToGrey = new FillTransition(Duration.millis(300.0D), this.rPassword, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
		this.schoolnumberToRed = new FillTransition(Duration.millis(300.0D), this.rSchoolnumber,
				Color.valueOf("#727986"), Color.valueOf("#d41923"));
		this.schoolnumberToGrey = new FillTransition(Duration.millis(300.0D), this.rSchoolnumber,
				Color.valueOf("#d41923"), Color.valueOf("#727986"));
		this.emailToRed = new FillTransition(Duration.millis(300.0D), this.rEmail, Color.valueOf("#727986"),
				Color.valueOf("#d41923"));
		this.emailToGrey = new FillTransition(Duration.millis(300.0D), this.rEmail, Color.valueOf("#d41923"),
				Color.valueOf("#727986"));
	}

	public void rollbackAnims() {
		this.tmUp.play();
		if (this.failUsername) {
			this.usernameToGrey.play();
			this.hideUsernameWarning.play();
			this.failUsername = false;
		}

		if (this.failPassword) {
			this.passwordToGrey.play();
			this.hidePasswordWarning.play();
			this.failPassword = false;
		}

		if (this.failSchoolnumber) {
			this.schoolnumberToGrey.play();
			this.hideSchoolnumberWarning.play();
			this.failSchoolnumber = false;
		}

		if (this.failEmail) {
			this.emailToGrey.play();
			this.hideEmailWarning.play();
			this.failEmail = false;
		}

		this.failControl = false;
	}

	public void lineUsername() {
		this.rUsername.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void linePassword() {
		this.rPassword.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void lineSchoolNumber() {
		this.rSchoolnumber.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void lineEmail() {
		this.rEmail.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void lineName() {
		this.rName.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void lineSurname() {
		this.rSurname.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void lineBirthday() {
		this.rBirthdate.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}

	public void linePhoneNumber() {
		this.rPhonenumber.setOpacity(1.0D);
		if (this.failControl) {
			this.rollbackAnims();
		}

	}
}