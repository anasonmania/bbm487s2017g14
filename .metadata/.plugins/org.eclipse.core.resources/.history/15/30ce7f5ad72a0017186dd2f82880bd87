package application.controller;

import application.Main;
import application.controller.AnimationFabric;
import com.sun.javafx.tk.FontMetrics;
import com.sun.javafx.tk.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.function.UnaryOperator;
import javafx.animation.FadeTransition;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.ToggleButton;
import javafx.scene.image.Image;
import javafx.scene.image.WritableImage;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundImage;
import javafx.scene.layout.BackgroundPosition;
import javafx.scene.layout.BackgroundRepeat;
import javafx.scene.layout.BackgroundSize;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.shape.Rectangle;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.util.Duration;
import javax.imageio.ImageIO;

public class L3AddBook implements Initializable {
	public GridPane paneHeader;
	public GridPane paneContent;
	public GridPane paneBottom;
	public TextField tfName;
	public TextField tfAuthor;
	public TextField tfPublisher;
	public TextField tfIsbn;
	public Label lbDeslength;
	public TextArea taDescription;
	public Pane imageBook;
	private boolean imageLoaded;
	private Image image;
	private File imageFile;
	public ToggleButton btnAvailable;
	public Rectangle rIsbn;
	public Rectangle rName;
	public Rectangle rAuthor;
	public Rectangle rPublisher;
	private FadeTransition showHeader;
	private FadeTransition hideHeader;
	private FadeTransition showContent;
	private FadeTransition hideContent;
	private FadeTransition showBottom;
	private FadeTransition hideBottom;
	private Duration opacityFactor = Duration.millis(1000.0D);
	int checkDesStart;
	int remainChar;

	public void initialize(URL location, ResourceBundle resources) {
		this.taDescription.setOpacity(0.4D);
		this.taDescription.setTextFormatter(new TextFormatter((change) -> {
			return change.getControlNewText().length() <= 500 ? change : null;
		}));
		this.checkDesStart = 0;
		this.setOpacityAnims();
		this.showHeader.play();
		this.showContent.play();
		this.showBottom.play();
		this.imageLoaded = false;
	}

	public void addNewBook(ActionEvent event) throws FileNotFoundException, SQLException {
		HashSet ids = new HashSet();
		PreparedStatement idsQuery = Main.con.prepareStatement("SELECT idbook FROM book ");
		ResultSet result = idsQuery.executeQuery();

		while (result.next()) {
			ids.add(Integer.valueOf(Integer.parseInt(result.getString(1))));
		}

		Random generator = new Random();

		int idbook;
		for (idbook = generator.nextInt(99999999) + 1; ids
				.contains(Integer.valueOf(idbook)); idbook = generator.nextInt(99999999) + 1) {
			;
		}

		String name = this.tfName.getText();
		String author = this.tfAuthor.getText();
		String publisher = this.tfPublisher.getText();
		String description = this.taDescription.getText();
		boolean isAvailable;
		if (this.btnAvailable.isSelected()) {
			isAvailable = true;
		} else {
			isAvailable = false;
		}

		int isbn;
		PreparedStatement statement;
		if (this.imageLoaded) {
			FileInputStream insBook = new FileInputStream(this.imageFile.getPath());
			statement = Main.con.prepareStatement(
					"INSERT INTO book (`idbook`, `isbn`, `name`, `author`, `publisher`, `description`, `isavailable`, `image`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
			statement.setInt(1, idbook);
			if (!this.tfIsbn.getText().equals("")) {
				isbn = Integer.parseInt(this.tfIsbn.getText());
				statement.setInt(2, isbn);
			}

			statement.setString(3, name);
			statement.setString(4, author);
			statement.setString(5, publisher);
			statement.setString(6, description);
			statement.setBoolean(7, isAvailable);
			statement.setBlob(8, insBook);
			statement.executeUpdate();
			System.out.println("with photo");
		} else {
			statement = Main.con.prepareStatement(
					"INSERT INTO book (`idbook`, `isbn`, `name`, `author`, `publisher`, `description`, `isavailable`) VALUES (?, ?, ?, ?, ?, ?, ?)");
			statement.setInt(1, idbook);
			if (!this.tfIsbn.getText().equals("")) {
				isbn = Integer.parseInt(this.tfIsbn.getText());
				statement.setInt(2, isbn);
			}

			statement.setString(3, name);
			statement.setString(4, author);
			statement.setString(5, publisher);
			statement.setString(6, description);
			statement.setBoolean(7, isAvailable);
			statement.executeUpdate();
			System.out.println("nonphoto");
		}

	}

	public void logout(ActionEvent event) throws IOException {
		Main.currentUser.logout();
		this.hideHeader.play();
		this.hideContent.play();
		this.hideBottom.play();
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/Login.fxml"));
		final Scene newScreen = new Scene(newParent);
		final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();

		 Task<Void> sleeper = new Task<Void>() {
	            @Override
	            protected Void call() throws Exception {
	                try {
	                    Thread.sleep((long) opacityFactor.toMillis()/2);
	                } catch (InterruptedException e) {
	                }
	                return null;
	            }
	        };
	        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
	            @Override
	            public void handle(WorkerStateEvent event) {
	            	appStage.setScene(newScreen);
	        		appStage.show();
	            }
	        });
	        new Thread(sleeper).start();
	}

	public void back(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(this.getClass().getResource("../view/HomePageLibrarian.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void setOpacityAnims() {
		this.showHeader = AnimationFabric.createOpacityAnim(this.paneHeader, 0.0D, 1.0D,
				this.opacityFactor.divide(2.0D));
		this.showContent = AnimationFabric.createOpacityAnim(this.paneContent, 0.0D, 1.0D, this.opacityFactor);
		this.showBottom = AnimationFabric.createOpacityAnim(this.paneBottom, 0.0D, 1.0D,
				this.opacityFactor.multiply(2.0D));
		this.hideHeader = AnimationFabric.createOpacityAnim(this.paneHeader, 1.0D, 0.0D,
				this.opacityFactor.multiply(2.0D));
		this.hideContent = AnimationFabric.createOpacityAnim(this.paneContent, 1.0D, 0.0D, this.opacityFactor);
		this.hideBottom = AnimationFabric.createOpacityAnim(this.paneBottom, 1.0D, 0.0D,
				this.opacityFactor.divide(2.0D));
	}

	public void handleAvailable(ActionEvent event) {
		if (!this.btnAvailable.isSelected()) {
			this.btnAvailable.setText("Not Available");
		} else {
			this.btnAvailable.setText("Available");
		}

		System.out.println(this.btnAvailable.isSelected());
	}

	public void selectImage() {
		LinkedList extensions = new LinkedList();
		extensions.add("*.jpg");
		extensions.add("*.png");
		extensions.add("*.jpeg");
		extensions.add("*.gif");
		System.out.println("imagefield clicked");
		FileChooser fileChooser = new FileChooser();
		fileChooser.getExtensionFilters().add(new ExtensionFilter("Image Files", extensions));
		this.imageFile = fileChooser.showOpenDialog((Window) null);
		if (this.imageFile != null) {
			System.out.println(this.imageFile.getName());
		}

		try {
			BufferedImage ex = ImageIO.read(this.imageFile);
			System.out.println(ex.getWidth() + " " + ex.getHeight());
			this.image = SwingFXUtils.toFXImage(ex, (WritableImage) null);
			BackgroundImage bgImgBook = new BackgroundImage(this.image, BackgroundRepeat.NO_REPEAT,
					BackgroundRepeat.NO_REPEAT, BackgroundPosition.CENTER, BackgroundSize.DEFAULT);
			Background bgBook = new Background(new BackgroundImage[] { bgImgBook });
			this.imageBook.setBackground(bgBook);
			this.imageLoaded = true;
			this.imageBook.setOpacity(1.0D);
		} catch (IOException arg5) {
			System.out.println("There is a problem with file");
		}

	}

	public void incImagefield() {
		this.imageBook.setOpacity(1.0D);
	}

	public void decImagefield() {
		if (!this.imageLoaded) {
			this.imageBook.setOpacity(0.4D);
		}

	}

	public void handleDescription() {
		this.taDescription.setOpacity(1.0D);
		FontMetrics fontMetrics = Toolkit.getToolkit().getFontLoader().getFontMetrics(this.taDescription.getFont());
		double inputWidth = 0.0D;
		if (this.checkDesStart < this.taDescription.getText().length()) {
			inputWidth = (double) fontMetrics.computeStringWidth(
					this.taDescription.getText(this.checkDesStart, this.taDescription.getText().length()));
		}

		if (inputWidth >= 580.0D) {
			this.taDescription.appendText("\n");
			this.checkDesStart = this.taDescription.getText().length() - 1;
		}

		this.remainChar = 500 - this.taDescription.getText().length();
		this.lbDeslength.setText("(" + this.remainChar + ")");
	}

	public void lineIsbn() {
		this.rIsbn.setOpacity(1.0D);
	}

	public void linePublisher() {
		this.rPublisher.setOpacity(1.0D);
	}

	public void lineName() {
		this.rName.setOpacity(1.0D);
	}

	public void lineAuthor() {
		this.rAuthor.setOpacity(1.0D);
	}
}