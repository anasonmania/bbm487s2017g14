package application.controller;

import java.io.IOException;
import java.net.URL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.ResourceBundle;

import application.Main;
import javafx.animation.FadeTransition;
import javafx.concurrent.Task;
import javafx.concurrent.WorkerStateEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.paint.ImagePattern;
import javafx.scene.shape.Rectangle;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.util.Duration;

public class C1_2BookDetail implements Initializable {
	public GridPane paneHeader;
	public GridPane paneContent;
	public GridPane paneBottom;

	public Rectangle rBookimg;
	public Label lbName, lbAuthor, lbPublisher, lbISBN, lbAvailable, lbDescription;

	public Button btnBorrow, btnReservation;
	private FadeTransition showHeader;
	private FadeTransition hideHeader;
	private FadeTransition showContent;
	private FadeTransition hideContent;
	private FadeTransition showBottom;
	private FadeTransition hideBottom;
	private Duration opacityFactor = Duration.millis(1000.0d);


	public void initialize(URL location, ResourceBundle resources) {

		setOpacityAnims();
		showHeader.play();
		showContent.play();
		showBottom.play();

		lbName.setText(Main.selectedBook.getName());
		lbAuthor.setText(Main.selectedBook.getAuthor());
		lbPublisher.setText(Main.selectedBook.getPublisher());
		lbISBN.setText(Integer.toString(Main.selectedBook.getIsbn()));
		String descString = Main.selectedBook.getDescription();
		StringBuilder descBuilder = new StringBuilder();
		List<String> descWords =  Arrays.asList(descString.split(" "));
		descString = "";
		int lineLength = 0;
		int line = 1;
		int lineLimit = 64;
		for(int i=0; i<descWords.size(); i++){
			lineLimit = line*64;
			System.out.println("linelimit" + lineLimit);
			if(lineLength<lineLimit){
				descBuilder.append(descWords.get(i));
				descBuilder.append(' ');
				lineLength += descWords.get(i).length();
				System.out.println(lineLength);
			}
			else{
				System.out.println("here");
				descBuilder.append("\n");
				descBuilder.append(descWords.get(i));
				descBuilder.append(" ");
				lineLength += descWords.get(i).length();
				line++;
			}
		}
		descString = descBuilder.toString();
		System.out.println(descWords.size());
		lbDescription.setText(descString);

		if(Main.selectedBook.getImage()!=null){
			rBookimg.setFill(new ImagePattern(Main.selectedBook.getImage()));
		}else{
			rBookimg.setFill(new ImagePattern(Main.defaultBook));
		}

		if(Main.selectedBook.isAvailable()){
			lbAvailable.setText("Available");
			lbAvailable.setStyle("-fx-text-fill: #46b859;");
		}
		else{
			lbAvailable.setText("Not Available");
			lbAvailable.setStyle("-fx-text-fill: #d41923;");
		}

		if(Main.selectedBook.isAvailable()){
			btnBorrow.setDisable(false);
			btnReservation.setDisable(true);
		}else {
			btnBorrow.setDisable(true);
			btnReservation.setDisable(false);
		}

	}

	public void borrowBook(ActionEvent event) throws SQLException, IOException{
		PreparedStatement countQuery = Main.con.prepareStatement("SELECT COUNT(owner) "
				+ "AS borrowcount FROM borrow WHERE owner = " + Main.currentUser.getUserId());
		ResultSet countResult = countQuery.executeQuery();
		int borrowCount = 5;
		while(countResult.next()){
			borrowCount = countResult.getInt("borrowcount");
		}

		System.out.println(borrowCount);

		if(borrowCount<3){
			LocalDate currentLocalDate = LocalDate.now();
			System.out.println(currentLocalDate);
			BorderPane borrowPane = (BorderPane) FXMLLoader.load(this.getClass().getResource("../view/C1_3BorrowDialog.fxml"));
			Scene borrowDialog = new Scene(borrowPane, 560, 400);
			Stage borrowStage = new Stage();
			borrowStage.setScene(borrowDialog);
			borrowStage.initStyle(StageStyle.TRANSPARENT);
			borrowStage.initModality(Modality.APPLICATION_MODAL);
			borrowStage.showAndWait();
/*			final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();

			appStage.setScene(borrowDialog);
			appStage.initModality(Modality.APPLICATION_MODAL);
*/

			/*PreparedStatement borrowQuery = Main.con.prepareStatement("INSERT INTO "
					+ "borrow (`idbook`, `owner`, `borrowdate`, `returndate`) VALUES (?, ?, ?, ?)");
			borrowQuery.setInt(1, Main.selectedBook.getid());
			borrowQuery.setInt(2, Main.currentUser.getUserId());
			*/

		}

	}

	public void reserveBook(ActionEvent event){

	}

	public void logout(ActionEvent event) throws IOException {
		Main.currentUser.logout();
		hideHeader.play();
		hideContent.play();
		hideBottom.play();
		Parent newParent = (Parent) FXMLLoader.load(getClass().getResource("../view/Login.fxml"));
		final Scene newScreen = new Scene(newParent);
		final Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();

		 Task<Void> sleeper = new Task<Void>() {
	            @Override
	            protected Void call() throws Exception {
	                try {
	                    Thread.sleep((long) opacityFactor.toMillis()/2);
	                } catch (InterruptedException e) {
	                }
	                return null;
	            }
	        };
	        sleeper.setOnSucceeded(new EventHandler<WorkerStateEvent>() {
	            @Override
	            public void handle(WorkerStateEvent event) {
	            	appStage.setScene(newScreen);
	        		appStage.show();
	            }
	        });
	        new Thread(sleeper).start();
	}

	public void back(ActionEvent event) throws IOException {
		Parent newParent = (Parent) FXMLLoader.load(getClass().getResource("../view/HomePageCustomer.fxml"));
		Scene newScreen = new Scene(newParent);
		Stage appStage = (Stage) ((Node) event.getSource()).getScene().getWindow();
		appStage.setScene(newScreen);
		appStage.show();
	}

	public void setOpacityAnims() {
		showHeader = AnimationFabric.createOpacityAnim(paneHeader, 0.0d, 1.0d,
				opacityFactor.divide(2.0d));
		showContent = AnimationFabric.createOpacityAnim(paneContent, 0.0d, 1.0d, opacityFactor);
		showBottom = AnimationFabric.createOpacityAnim(paneBottom, 0.0d, 1.0d,
				opacityFactor.multiply(2.0d));
		hideHeader = AnimationFabric.createOpacityAnim(paneHeader, 1.0d, 0.0d,
				opacityFactor.multiply(2.0d));
		hideContent = AnimationFabric.createOpacityAnim(paneContent, 1.0d, 0.0d, opacityFactor);
		hideBottom = AnimationFabric.createOpacityAnim(paneBottom, 1.0d, 0.0d,
				opacityFactor.divide(2.0d));
	}



}